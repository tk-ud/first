構造知性化ループ設計ドキュメント（再構成判定設計書）
________________________________________
目的
本ドキュメントは、VoiceLog構成における phase_mapping（構造単位）を「維持すべきか／再構成すべきか」を判断するための中核設計である。
 functionScore, error_log, emotion_log, MLmodelEvaluation などのスコア・ログをもとに、構造活性の傾向・異常・劣化・過適合を検出し、
 AI（O1・Listen・Deep）または開発者が構造再構成トリガーを判断するための基準を明文化することを目的とする。
この文書は「他の設計書群にまたがるスコア・ログの評価起点」として機能し、特定のテーブルや関数定義の詳細ではなく、
 それらを横断的に結びつけた「再構成判断モデルの設計原則」を提供する。
________________________________________
1. 構造診断ループの主語と使用者
●	判定対象：phase_mapping（構造ユニット）
●	判定者：Listen, O1, Deep などの構造診断モジュール／または開発者
●	判定材料：スコア系（functionScore, MLmodelEvaluation）、ログ系（error_log, emotion_log）
●	判定結果：再構成対象にマーク → trigger_map への登録
________________________________________
2. 判定材料の定義と役割分離
● functionScore：
 ユーザー操作に対する関数応答の履歴であり、構造スコアではない。感情変動・ML構築の起点として使用。
● error_log：
 phase単位の異常密度・再実行率・再修正ループを示す。一定数超過で phase 再構成候補。
● emotion_log：
 ユーザー操作時の感情変数変動（例：stress上昇、motivation下降）を時系列で記録。
 短期スパイク、継続的上昇、リセット後再燃などが発生した場合、構造負荷の兆候とみなす。
● MLmodelEvaluation：
 diff_score, integral_score, delta_avg, accel_avg によって構造出力の再現性と変化傾向を定量化。
 accel_avgがしきい値を超えた場合、構造破綻または過適合の兆候。
________________________________________
3. phase_mapping 再構成の条件（プレーン記述）
以下のいずれかを満たす場合、phase_mapping は再構成候補として trigger_map に登録される：
●	error_log に記録されたエラー数が一定値を超過した場合（例：N件/週）
●	MLmodelEvaluation における integral_score が低下し、accel_avg が急増した場合
●	emotion_log にて stress のピークが複数回継続、もしくは motivation が基準値を下回った場合
●	functionScore による修正ログが集中するにも関わらず再修正率が下がらない（改善効果なし）
これらはいずれも構造の「劣化」「過適合」「不定性」「負荷集中」の兆候であり、
 該当phase_mappingは trigger_map テーブルに export され、O1 などによる再構成提案対象となる。

> 注意：`cognition_log` は phase_mapping の直接的な再構成トリガーには使用されない。  
> 代わりに `prompt_ver.diff` を生成するための非破壊診断指標として扱う。  
> phase_mapの変化は error_log や functionScore に基づき、深層診断（Deep）によってのみ行われる。

________________________________________
4. 構造診断ステップフロー（プレーン形式）
●	Step 1：ユーザー操作ログが functionScore に記録される（スコア・コメント・修正）
●	Step 2：phase_id 単位で error_log・emotion_log が蓄積される（継続的挙動）
●	Step 3：MLmodelEvaluation に diff_score / integral_score 系の傾向が記録される
●	Step 4：スコアしきい値／感情スパイク／エラー密度などが再構成条件を満たす
●	Step 5：trigger_map に登録され、O1/開発者によって phase_mapping が再設計される
________________________________________
5. 注意：構造スコア≠functionScore
functionScore は phase_mapping の「評価」ではなく、単なる反応記録である。 構造スコアとは、上記に定義された統計的・履歴的指標（integral_score、accel_avg、エラー密度、感情スパイク等）によって定義されるものである。 これを混同すると、誤って正常な構造を再構成対象として判断する可能性がある。
________________________________________
結論
このドキュメントは、「構造を再構成すべきか」を判断するためのスコア解釈設計書である。
 他のドキュメント（functionScore定義、ML構築フロー、感情エンジン設計など）はここで参照される素材であり、
 本書の目的は「それらをどのように解釈し、構造再編の判断基準に結びつけるか」を体系化することにある。
VoiceLogにおいてはこのループが自律的な進化判断器として設計されており、将来的には外部AIや開発者の関与なく自己構造更新が可能な起点と位置づけられる。

※この判断ループ自体はVoiceLog実装に限らず、MFC構造に準拠した任意のシステムに適用可能であり、構造知性化を成立させるための普遍的設計要素とする。

[定期メンテ]
    ↓
[統計エンジン（傾向・スパイク・accel_avg）]
    ↓
[Deep：構造診断（スパイク or 徐変）]
    ↓
[O1：修正コード生成]
    ↓
[ファイル生成 → deploy.yaml反映]
    ↓
[テストサーバーデプロイ]
    ↓
[評価：error_score改善判定]
    └─→ NG → リトライ（最大3回）→ 超えたら trigger_map: retry_limit_exceeded

[定期診断 or 構造候補指定]
    ↓
[統計エンジン（functionScoreスコア変動分析）]
    ↓
[認知エンジン（意味ズレ判定：Δ > 閾値）]
    ↓
[O1：promptVer再生成（構造意図を保持）]
    ↓
[新verで試用 → 認知エンジン再診断]
    └─→ NG（Δ継続 or diff増大）→ 新ver削除 → 終了

[定期バッチ or データ量閾値到達]
    ↓
[学習処理（functionScore.request/response → MLmodelGeneratePrompt）]
    ↓
[モデル評価：diff_score, integral_score, accel_avg]
    └─→ NG → モデル廃棄 → 待機（次回データ収集まで）
